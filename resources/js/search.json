[[{"l":"Welcome to Bashly","p":["Bashly is a command line application (written in Ruby) that lets you generate feature-rich bash command line tools.","The design intention is to let you focus on your specific code, without worrying about command line argument parsing, usage texts, error messages and other functions that are usually handled by a framework in any other programming language.","Bashly Demo"]},{"l":"How it works","p":["You provide a YAML configuration file, describing commands, sub-commands, arguments, and flags. Running bashly init creates an initial sample YAML file for you ( example).","Bashly then automatically generates a bash script (when you run bashly generate) that can parse and validate user input, provide help messages, and run your code for each command.","Your code for each command is kept in a separate file, and can be merged again if you change it ( example)."]},{"l":"Features","p":["and more.","Bash completions.","Bashly is responsible for:","Color output.","Commands(and sub-commands).","Config file management(INI format).","Generating a single, standalone bash script.","Generating usage texts and help screens, showing your tool's arguments, flags and commands (works for sub-commands also).","Optional or required option flags(with or without flag arguments).","Optional or required positional arguments.","Parsing the user's command line and extracting:","Preventing your script from running unless the command line is valid.","Providing you with a place to input your code for each of the functions your tool performs, and merging it back to the final script.","Providing you with additional (optional) framework-style, standard library functions:","Standard flags (like --help and --version).","YAML parsing."]}],[{"l":"Installation","p":["Install bashly using one of these methods.","If you have Ruby 2.7 or higher ( ruby -v), use this installation method:","Mac users can enable Ruby gem installation first, and then install bashly:","If you have docker installed, you can create an alias that will run the docker image:"]},{"l":"Prerequisites","p":["The bash scripts generated by bashly can run in any shell, but require that bash 4 or higher is installed.","Mac users can upgrade bash by running:"]}],[{"l":"Getting Started","p":["Everything in bashly originates from a single configuration file, named bashly.yml.","This configuration file can be set up to generate two types of scripts:","Script with commands (for example, like docker or git).","Script without commands (for example, like ls)","This is detected automatically by the contents of the configuration: If it contains a commands definition, it will generate a script with commands.","In an empty directory, create a sample configuration file by running any of these commands:","This will create a sample src/bashly.yml file. You can edit this file to specify which arguments, flags and commands you need in your bash script.","Then, generate an initial bash script and function placeholder scripts by running:","This will:","Create the bash executable script.","Create files for you to edit in the src folder.","Finally, edit the files in the src folder. Each of your script's commands get their own file. Once you edit, run bashly generate again to merge the content from your functions back into the script."]}],[{"l":"Writing Your Scripts","p":["The bashly generate command is performing the following actions:","Generates placeholder files in the src directory - one file for each of the defined commands in your bashly.yml file. These files are generated only once and are never overwritten.","Merges all these partial scripts into a single bash script, and saves it in the root directory of your project."]},{"l":"Processing user input","p":["In order to access the parsed arguments in any of your partial scripts, you may simply access the $args associative array.","For example:","You will notice that all the arguments of the associative array are printed on screen. This is done by the inspect_args function that was inserted into the generated partial script src/root_command.sh.","You can now access these variables by modifying sec/root_command.sh like this:","After editing the file, run these commands:"]},{"l":"Adding common functions","p":["In case you wish to add functions that can be used from multiple locations in your code, you can place *.sh files inside the src/lib- these files will be merged as is to the final bash script.","To get a starting point, you can run the convenience command:"]},{"l":"Initialization function","p":["Any code within the src/initialize.sh file will be called before anything else in your generated bash script.","If your script defines Environment Variables with default values, these values will be available to you in the initialize.sh file."]},{"l":"Custom header","p":["In case you wish to replace the header in the generated script, simply put the new content in src/header.sh.","Be sure to start your header with a shebang:#!/usr/bin/env bash"]},{"l":"Hidden comments","p":["Any comment in your source files that begins with two # symbols, will be removed from the final generated script. This is ideal for adding developer notes that should not be visible to your end users."]}],[{"l":"Settings","p":["Some of bashly's commands can be tweaked through the use of environment variables, or a settings file. The environment variables supported by each command are shown in the respective command's --help message.","If you wish to load settings from a configuration file instead of using environment variables, you can generate an initial settings file by running:","which will create the following file:"]}],[{"l":"Testing Your Scripts"},{"l":"Static Code Analysis","p":["The bash scripts generated by bashly are shellcheck compliant, and shfmt compliant.","This means that you can use these tools to ensure that any custom code you use in your script, is also valid.","Note that when testing with shfmt, you should specify an indentation of 2 spaces, and case indentation rules:"]},{"l":"Approval Testing","p":["Run bashly add test to add a test folder to your project, with the Approvals.bash framework.","In cases where your scripts are more elaborate, or when you wish to ensure your scripts behave as expected, you can use any bash testing framework to test your scripts.","One such lightweight framework, is Approvals.bash, which lets you test any command in your script, and prompting you for interactive approval of its output. Whenever the output changes, you will be prompted again to approve it.","A sample test script looks like this:"]}],[{"l":"Examples","p":["The examples folder in the GitHub repository contains many detailed and documented example configuration files, with their output.","All examples are listed below for convenience."]},{"l":"Basic use","p":["minimal- the most basic \"hello world\" example","commands- a script with sub-commands","commands-nested- a script with nested sub-commands"]},{"l":"Basic features","p":["command-default- configuring a default command","command-default-force- configuring a default command that runs instead of showing the usage text","command-aliases- allowing a command to be called with multiple names","command-examples- configuring command examples","dependencies- halting script execution unless certain dependencies are installed","environment-variables- halting script execution unless certain environment variables are set","default-values- arguments and flags with default values","minus-v- using -v and -h in your script","multiline- help messages with multiple lines"]},{"l":"Advanced configuration features","p":["catch-all- a command that can receive an arbitrary number of arguments","catch-all-advanced- another example for the catch_all option","catch-all-stdin- combining catch_all with stdin to read multiple files","extensible- letting your script's users extend the script","extensible-delegate- extending your script by delegating commands to an external executable","whitelist- arguments and flags with a predefined allowed list of values","repeatable-arg- allowing arguments to be provided multiple times","repeatable-flag- allowing flags to be provided multiple times","reusable-flags- reuse flag definition for multiple commands","conflicts- defining mutually exclusive flags","command-private- hiding commands from the command list","stdin- reading input from stdin","filters- preventing commands from running unless custom conditions are met","commands-expose- showing sub-commands in the parent's help"]},{"l":"Customization","p":["command-groups- grouping sub-commands in logical sections","custom-strings- configuring the script's error and usage texts","custom-includes- adding and organizing your custom functions","custom-script-header- configuring a different script header","footer- adding a footer to the help message","command-filenames- configuring paths for your source scripts","command-function- configuring custom internal function names","split-config- splitting your bashly.yml into several smaller files"]},{"l":"Real-world-like examples","p":["docker-like- a sample script with deep commands (like docker container run)","git-like- a sample script with sub-commands similar to git"]},{"l":"Bashly library features","p":["config-ini- using the config (INI) functions","colors- using the color print feature","yaml- using the YAML reading functions","completions- adding bash completion functionality","validations- adding argument validation functions"]},{"l":"Other Examples","p":["heredoc- using heredoc strings","heredoc-alt- using heredoc strings in the lib directory","settings- using the settings.yml file to adjust bashly's behavior","help-command- adding a help command to your script"]},{"l":"Real world examples","p":["These tools were developed using bashly. You can review their code to learn more about using bashly.","Alf- a generator for bash aliases and sub-aliases","git-changelog- a change log generator","Respec- a convenience wrapper for ruby's rspec","Rush- a Personal Package Manager","slack-emoji-toolkit- liberate your custom Slack emojis"]}],[{"l":"Command","p":["The command object serves two purposes, it:","Defines the root CLI application (command).","Defines any nested sub-commands, if any.","Unless otherwise specified, these definitions can be used for both the root command and sub-commands (under the commands definition).","Most properties are optional, unless specified otherwise."]},{"l":"Basic Options"},{"l":"name","p":["String","The name of the script or sub-command."]},{"l":"alias","p":["String / Array of Strings","This command used to be called short in bashly < 0.8.0","One or more additional optional names for this command. This can be used to create a shortcut for a command, or provide alternative names for it.","This option accepts either a string, or an array of strings.","You can add * as a suffix, to denote a starts with pattern - for example:"]},{"l":"help","p":["String","The header text to display when using --help.","This option can have multiple lines. In this case, the first line will be used as summary wherever appropriate."]},{"l":"args","p":["Array of Arguments","Specify the array of positional arguments this script needs.","Command"]},{"l":"flags","p":["Array of Flags","Specify the array of option flags this script needs.","Flags that are defined in a command that has sub-commands, are considered\"global flags\", and will be available to all sub-commands, in addition to any flag defined in any of the sub-commands themselves.","The docker-like example demonstrates this feature.","Command"]},{"l":"commands","p":["Array of Commands","Specify the array of commands. Each command will have its own args and flags.","Using commands on a given command implies that this command does not have flags or args."]},{"l":"version","p":["String","The string to display when using --version."]},{"l":"Common Options"},{"l":"default","p":["Boolean / String","Setting this to true on any command, will cause any unrecognized command line to be passed to this command.","Settings this to force will also execute this command (instead of showing the root usage text) when executed without any arguments."]},{"l":"environment_variables","p":["Array of Environment Variables","Specify an array of environment variables required or desired by your script.","Command"]},{"l":"examples","p":["String / Array of Strings","Specify an array of examples to show when using --help, or a multi-line string."]},{"l":"footer","p":["String","Add a custom message that will be displayed at the end of the --help text."]},{"l":"group","p":["String","In case you have many commands, use this option to specify a caption to display before this command.","This option is purely for display purposes."]},{"l":"Advanced Options"},{"l":"catch_all","p":["Boolean / String / Hash","Specify that this command should allow for additional arbitrary arguments or flags.","It can be set in one of three ways:","Set to true to just enable it.","Set to a string, to show this string in the usage help text.","Set to a hash containing label, help and required keys, to show a detailed help for it when running with --help. By default, catch_all arguments are optional, but you can specify required: true to require at least one argument.","To access arguments captured by catch_all in your script, use the$other_args array (or call the inspect_args command to see them)."]},{"l":"completions","p":["Array of Strings","Specify an array of additional completion suggestions when used in conjunction with bashly add comp.","Command"]},{"l":"dependencies","p":["Array of Strings / Hash","Specify a list of any required external dependencies (commands). The script execution will be halted with a friendly error unless all dependency commands exist.","This can be provided either as a simple array, or as a hash of command: help message pairs. For example:"]},{"l":"expose","p":["Boolean / String","Setting this to true or always on any command that has sub-commands, will show its sub-commands in the help or usage text of the parent command.","Set to true to show the sub-commands only when the parent command is executed with --help.","Set to always to show the sub-commands also when the parent command is executed without any arguments.","You can use expose with the group option, to show sub-commands in a logical, visual grouping."]},{"l":"extensible","p":["Boolean / String","Specify that this command can be extended by external means.","Command"]},{"l":"filename","p":["String","The path (relative to src) to the partial source code file, in case you wish to store your source files in a different path than the default one.","This is useful for scripts that contain many commands."]},{"l":"filters","p":["Array of Strings","Add custom filter functions that will prevent the command from running unless certain conditions are met.","Command"]},{"l":"function","p":["String","The base name of the internal functions bashly will use when generating the script.","This is useful for scripts that contain several commands that otherwise evaluate to the same internal function name.","Note that the name specified here is just used as a base name. Bashly will generate several functions from it:","cli name_base function name_command","cli name_base function name_usage","and possibly more","Under most circumstances you should avoid using this directive. It is provided as a \"last resort\" mechanism to help in solving more complex scenarios."]},{"l":"private","p":["Boolean","Setting this to true on any command, will hide it from the command list."]}],[{"l":"Argument","p":["Specify positional arguments (required or optional) used by your script.","The argument's value will be available to you as ${args[name]} in your bash function.","Most properties are optional, unless specified otherwise."]},{"l":"Basic Options"},{"l":"name","p":["String","The name of the argument. Use lowercase letters, since it serves multiple purposes:","It will be capitalized in the help text.","It will be used as the hash key in the ${args[...]} associative bash array."]},{"l":"help","p":["String","The message to display when using --help. Can have multiple lines."]},{"l":"Common Options"},{"l":"default","p":["String","The value to use in case it is not provided by the user. Implies that this argument is optional."]},{"l":"required","p":["Boolean","Specify that this argument is required.","Once you define an optional argument (without required: true) then you cannot define required arguments after it."]},{"l":"Advanced Options"},{"l":"allowed","p":["Array of Strings","Limit the allowed values to a specified whitelist. Can be used in conjunction with default and required."]},{"l":"repeatable","p":["Boolean","Specify that this argument can be provided multiple times.","The received value will be formatted as a quoted, space-delimited string which you will need to convert to array with something like eval data=(${args[path]})."]},{"l":"validate","p":["String","Apply a custom validation function.","Argument"]}],[{"l":"Flag","p":["Specify flags (required or optional) used by your script.","The flag's value will be available to you as ${args[--output]} in your bash function (regardless of whether the user provided it with the long or short form).","Bashly supports these additional flag formats as input:","-abc same as -a -b -c","-a=arg same as -a arg","--flag=arg same as --flag arg","Most properties are optional, unless specified otherwise."]},{"l":"Basic Options"},{"l":"long","p":["String","The long form of the flag, including the -- prefix."]},{"l":"short","p":["String","The short form of the flag, including the - prefix.","The -v and -h flags will be used as the short options for --version and --help respectively only if you are not using them in any of your own flags."]},{"l":"help","p":["String","The text to display when using --help. Can have multiple lines."]},{"l":"arg","p":["String","If the flag requires an argument, specify its name here."]},{"l":"Common Options"},{"l":"default","p":["String","The value to use in case it is not provided by the user. Implies that this flag is optional, and only makes sense when the flag has an argument."]},{"l":"required","p":["Boolean","Specify if this flag is required."]},{"l":"Advanced Options"},{"l":"allowed","p":["Array of Strings","Limit the allowed arguments to a given whitelist. Can be used in conjunction with default and required.","Remember to set the arg name when using this option."]},{"l":"conflicts","p":["Array of Strings","Specify that this flag is mutually exclusive with one or more other flags. The values of this array should be the long versions of the flags: conflicts: [--other, --another]","This option should be specified on both sides of the exclusivity."]},{"l":"completions","p":["Array of Strings","Specify an array of additional completion suggestions when used in conjunction with bashly add comp.","Remember to set the arg name when using this option.","Flag"]},{"l":"repeatable","p":["Boolean","Specify that this flag can be provided multiple times.","When the flag does not have an argument, the user can provide it multiple times in the form of -v -v -v or -vvv. In this case, the received value will be the number of times it was entered.","When the flag has an argument, the user can provide it in the form of-d value1 -d value 2. In this case, the received value will be formatted as a quoted, space-delimited string which you will need to convert to array with something like eval data=(${args[--data]})."]},{"l":"validate","p":["String","Apply a custom validation function.","Flag"]}],[{"l":"Environment Variable","p":["Specify environment variables (required or optional) used by your script.","If an environment variable is defined as required (false by default), the execution of the script will be halted with a friendly error if it is not set.","In addition, you can specify a default value for the environment variable, which will be used in case the user has not defined it in their environment.","Most properties are optional, unless specified otherwise."]},{"l":"Basic Options"},{"l":"name","p":["String","The name of the variable. Use a lowercase name, it will be automatically capitalized wherever needed."]},{"l":"help","p":["String","The message to display when using --help. Can have multiple lines."]},{"l":"Common Options"},{"l":"default","p":["String","The value to use in case it is not provided by the user. Implies that this environment variable is optional."]},{"l":"private","p":["Boolean","Setting this to true on any environment variable, will hide it from the help text. This only makes sense when default is set."]},{"l":"required","p":["Boolean","Specify if this variable is required."]}],[{"l":"Custom Strings","p":["Bashly lets you control all the strings emitted by your generated bash script.","Most of these strings (for example, help messages) are configured as part of your bashly.yml configuration file.","However, if you also wish to customize other strings (for example, error messages), you will need to add a file named bashly-strings.yml to your src folder.","To do so, run:","This will add a configuration file with all the internal strings for you to configure.","For example:","Some strings contain special tokens, such as %s and %{name}. These will be replaced at runtime and you should keep them in your custom strings."]}],[{"l":"Library Functions","p":["Bashly comes with a set of library functions that can be added to your script by running the bashly add command."]},{"l":"YAML parser","p":["Adds the ability to read YAML files in your bash script.","You can then use the yaml_load function anywhere in your script:"]},{"l":"INI handler","p":["Adds the ability to create, read and write INI files.","By default, these functions will work on a file named config.ini but you can change it by setting the CONFIG_FILE environment variable in your src/initialize.sh file.","You can then use thees functions anywhere in your script:"]},{"l":"Color output","p":["Adds functions for printing colored strings.","Then, anywhere in your script:","See the generated script in src/lib/colors.sh for the full list of colors."]},{"l":"Auto-update","p":["Files added by the bashly add * commands can be automatically updated to their original state by running","The --upgrade flag will scan all the files in the src/lib directory for a special magic comment in this format:","When found, and assuming the path of the file matches the one in the library, this file will be updated.","You are encouraged to modify the generated library functions to your liking, but if you do so, remember to remove this magic comment to prevent accidentally overriding it in future runs of bashly generate --upgrade."]}],[{"l":"Custom Validations","p":["Bashly supports custom validation functions for your arguments, and flag arguments. This is how it works:","In your bashly configuration file, arguments and flags (with arguments) may have a validate: function_name option.","Whenever your run your script, it will look for a function with that name, prefixed by validate_ and will run it before allowing the user input to pass.","If the function returns any string, it is considered an error. The string will be displayed on screen, as the error message."]},{"l":"Built-in Custom Validations","p":["In addition, bashly comes with several built-in custom validations for common tasks:","file_exists- Ensures that the argument points to a file.","dir_exists- Ensures that the argument points to a directory.","integer- Ensures that the argument is an integer.","not_empty- Ensures that the argument is not empty.","In order to add these validations to your code, run:"]}],[{"l":"Custom Filters","p":["Bashly supports custom filter functions for your commands. These filters allow you to define custom conditions that can prevent your command from running unless they are met.","This is how it works:","In your bashly configuration file, commands may have a filters option, specifying an array of one or more function names.","Whenever your run your script, it will look for functions with that name, prefixed by filter_ and will run them before calling the command code.","If any of the functions returns any string, it is considered an error. The string will be displayed on screen, as the error message.","To verify a program is installed, use dependencies instead.","To verify an environment variable is defined, use environment_variables instead."]}],[{"l":"Bash Completion","p":["Bashly comes with built-in bash completions generator, provided by the completely gem.","By running any of the bashly add comp commands, you can add this functionality to your script in one of three ways:","Creates a standalone completion script that can be sourced or copied to the system's bash completions directory.","Creates a function in your ./src/lib directory that echoes a completion script. You can then call this function from any command (for example yourcli completions) and your users will be able to install the completions by running eval $(yourcli completions).","Creates the raw data YAML file. This is intended mainly for development purposes.","The bash completions generation is completely automatic, but you will have to regenerate the completion function whenever you make changes to your bashly.yml file.","By running bashly generate --upgrade, your completions function(generated with bashly add comp function) will be regenerated."]},{"l":"Custom command completions","p":["In addition to the automatic suggestion of sub-commands and flags, you can instruct bashly to also suggest files, directories, users, git branches and more. To do this, add another option in your bashly.yml on the command you wish to alter:"]},{"l":"Custom flag completions","p":["The completions option is also available on flags that have an arg. Similarly to the allowed option for arguments, the allowed list is added to the suggestions automatically (without the need to use completions).","Anything between ... will be added using the compgen -A action flag.","Anything else, will be appended to the compgen -W flag.","In case you are using the Argument allowed option or the Flag argument allowed option, these will be automatically added to the completions list as well."]},{"l":"Completions in ZSH","p":["If you are using Oh-My-Zsh, bash completions should already be enabled, otherwise, you should enable completion by adding this to your ~/.zshrc(if is it not already there):","After adding this (and restarting your session), you should be able to source any bash completion script in zsh."]},{"l":"Additional documentation","p":["For more information about these custom completions, see the documentation for the completely gem."]},{"l":"Example"}],[{"l":"Split Config","p":["In case your bashly.yml file becomes too large, you may import smaller configuration snippets by using the import keyword.","Loaded configuration snippets can be placed in:","Other YAML files, anywhere you want (typically, inside your src folder).","As a YAML front matter, alongside the shell code that they represent."]},{"l":"Importing other YAML files","p":["Consider the below, standard bashly.yml config:","Extracting the download command to a separate YAML file, looks like this:"]},{"l":"Embedding the YAML definition alongside its bash code","p":["The import directive can also be used to load YAML front matter from any text file. This feature can be useful in case you wish to embed the definition of the command alongside its source code (shell script)."]},{"l":"Debugging complex configuration","p":["Running bashly validate --verbose shows the configuration file as Bashly sees it, even if it is invalid. This can be helpful when trying to debug validation errors for complex configuration files."]}],[{"l":"Extensible Scripts","p":["You may configure your generated bash script to delegate any unknown command to an external executable, by setting the extensible option to either true, or to a different external command.","This is similar to how git works. When you execute git whatever, the git command will look for a file named git-whatever in the path, and execute it.","The extensible option cannot be specified together with the default option, since both specify a handler for unknown commands.","The extensible option supports two operation modes:"]},{"l":"Extension mode","p":["extensible: true","By setting extensible to true, a specially named executable will be called when an unknown command is called by the user.","Given this configuration:","And this user command:","The generated script will look for an executable named myscript-something in the path. If found, it will be called."]},{"l":"Delegate mode","p":["extensible: executable name","By setting extensible to any string, unknown command calls by the user will be delegated to the executable with that name.","Given this configuration:","And this user command:","The generated script will execute git status."]}]]