[[{"l":"Welcome to Bashly","p":["Bashly is a command line application (written in Ruby) that lets you generate feature-rich bash command line tools.","The design intention is to let you focus on your specific code, without worrying about command line argument parsing, usage texts, error messages and other functions that are usually handled by a framework in any other programming language.","Bashly Demo"]},{"l":"How it works","p":["You provide a YAML configuration file, describing commands, sub-commands, arguments, and flags. Running bashly init creates an initial sample YAML file for you ( example).","Bashly then automatically generates a bash script (when you run bashly generate) that can parse and validate user input, provide help messages, and run your code for each command.","Your code for each command is kept in a separate file, and can be merged again if you change it ( example)."]},{"l":"Features","p":["and more.","Auto-generating markdown and man page documentation for your script.","Bash completions.","Bashly is responsible for:","Color output.","Commands(and sub-commands).","Config file management(INI format).","Generating a human readable, shellcheck-compliant and shfmt-compliant script.","Generating a single, standalone bash script.","Generating usage texts and help screens, showing your tool's arguments, flags and commands (works for sub-commands also).","Optional or required option flags(with or without flag arguments).","Optional or required positional arguments.","Parsing the user's command line and extracting:","Preventing your script from running unless the command line is valid.","Providing you with a place to input your code for each of the functions your tool performs, and merging it back to the final script.","Providing you with additional (optional) framework-style, standard library functions:","Standard flags (like --help and --version).","YAML parsing."]},{"l":"Sponsored By"}],[{"l":"Installation","p":["Install bashly using one of these methods.","Bashly requires Ruby 3.0 or higher ( ruby -v).","If you have docker installed, you can create an alias that will run the docker image:"]},{"l":"Bash Completions","p":["To enable bash completions for the bashly executable itself run:","You might need to install the bash-completion package for your operating system if it is not already installed. For example:","To generate bash completions for your own scripts, see Advanced Features Bash Completion"]},{"l":"Prerequisites","p":["The bash scripts generated by bashly can run in any shell, but require that bash 4 or higher is installed.","Mac users can upgrade bash by running:"]}],[{"l":"Getting Started","p":["Everything in bashly originates from a single configuration file, named bashly.yml.","This configuration file can be set up to generate two types of scripts:","Script with commands (for example, like docker or git).","Script without commands (for example, like ls)","This is detected automatically by the contents of the configuration: If it contains a commands definition, it will generate a script with commands.","In an empty directory, create a sample configuration file by running any of these commands:","This will create a sample src/bashly.yml file. You can edit this file to specify which arguments, flags and commands you need in your bash script.","Then, generate an initial bash script and function placeholder scripts by running:","This will:","Create the bash executable script.","Create files for you to edit in the src folder.","Finally, edit the files in the src folder. Each of your script's commands get their own file. Once you edit, run bashly generate again to merge the content from your functions back into the script."]}],[{"l":"Writing Your Scripts","p":["The bashly generate command is performing the following actions:","Generates placeholder files in the src directory - one file for each of the defined commands in your bashly.yml file. These files are generated only once and are never overwritten.","Merges all these partial scripts into a single bash script, and saves it in the root directory of your project."]},{"l":"Processing user input","p":["In order to access the parsed arguments in any of your partial scripts, you may simply access the $args associative array.","For example:","You will notice that all the arguments of the associative array are printed on screen. This is done by the inspect_args function that was inserted into the generated partial script src/root_command.sh.","You can now access these variables by modifying src/root_command.sh like this:","After editing the file, run these commands:"]},{"l":"Adding common functions","p":["In case you wish to add functions that can be used from multiple locations in your code, you can place *.sh files inside the src/lib- these files will be merged as is to the final bash script.","To get a starting point, you can run the convenience command:"]},{"l":"Hooks"},{"l":"Initialization","p":["Any code within the src/initialize.sh file will be called before anything else in your generated bash script.","If your script defines Environment Variables with default values, these values will be available to you in the initialize.sh file."]},{"i":"beforeafter-hooks","l":"Before/after hooks","p":["Any code within the src/before.sh file will be called before executing any command, but after processing and validating the command line. Similarly, any code within the src/after.sh file will be called after executing any command.","Writing Your Scripts"]},{"l":"Custom header","p":["In case you wish to replace the header in the generated script, simply put the new content in src/header.sh.","Be sure to start your header with a shebang:#!/usr/bin/env bash"]},{"l":"Hidden comments","p":["Any comment in your source files that begins with two # symbols, will be removed from the final generated script. This is ideal for adding developer notes that should not be visible to your end users."]}],[{"l":"Settings","p":["Some of bashly's commands can be tweaked through the use of environment variables, or a settings file."]},{"l":"Settings file","p":["If you wish to load settings from a configuration file, you can generate an initial settings file by running:","which will create the default settings.yml file in the working directory.","Bashly will look for the settings file in one of these paths:","A path set in the environment variable BASHLY_SETTINGS_PATH.","A file named bashly-settings.yml in the working directory.","A file named settings.yml in the working directory.","The words yes and no are equivalent to true and false","To specify a null value, use ~"]},{"l":"Environment variables","p":["All settings are optional (with their default values provided below), and can also be set with an environment variable with the same name, capitalized and prefixed by BASHLY_- for example: BASHLY_SOURCE_DIR","When setting environment variables, you can use:","0, false or no to represent false","1, true or yes to represent true"]},{"l":"Options"},{"l":"source_dir","p":["Set the path containing the bashly source files."]},{"l":"config_path","p":["Set the path to bashly.yml. You can use the special token %{source_dir} to reference the value of the source_dir option."]},{"l":"target_dir","p":["Set the path to use for creating the final bash script."]},{"l":"lib_dir","p":["Set the path to use for common library files, relative to source_dir."]},{"l":"commands_dir","p":["Set the path to use for command files, relative to source_dir.","When set to nil(denoted by ~), command files will be placed directly under source_dir.","When set to any other string, command files will be placed under this directory, and each command will get its own sub-directory.","In case you plan on creating a large script with many commands, it is recommended to enable this by setting it to something like commands_dir: commands."]},{"l":"strict","p":["Specify which bash options to apply on initialization.","strict: true- Bash strict mode ( set -euo pipefail)","strict: false- Only exit on errors ( set -e)","strict: ''- Do not add any set directive","strict: string- Add any other custom set directive, for example strict: set -o pipefail"]},{"l":"tab_indent","p":["Specify the indentation style of the generated script.","tab_indent: false- Indent with two spaces.","tab_indent: true- Indent with Tab (every 2 leading spaces will be converted to a tab character)."]},{"l":"compact_short_flags","p":["Specify how the generated script should treat flags in the form of -abc","compact_short_flags: true- Expand -abc to -a -b -c.","compact_short_flags: false- Do not expand -abc(consider this an invalid input)."]},{"l":"env","p":["Specify if the generated script should include development related comments or not.","env: development- Generate with file markers.","env: production- Generate a smaller script, without file markers."]},{"l":"partials_extension","p":["Set the extension to use when reading/writing partial script snippets."]},{"l":"usage_colors","p":["Enable color output for several aspects of the help message of the generated script. Each of these options may be a name of a color function that exists in your script, for example: green or bold.","You can run bashly add colors to add a standard colors library.","This option cannot be set using environment variables."]}],[{"l":"Testing Your Scripts"},{"l":"Static Code Analysis","p":["The bash scripts generated by bashly are shellcheck compliant, and shfmt compliant.","This means that you can use these tools to ensure that any custom code you use in your script, is also valid.","Note that when testing with shfmt, you should specify an indentation of 2 spaces, and case indentation rules:"]},{"l":"Approval Testing","p":["Run bashly add test to add a test folder to your project, with the Approvals.bash framework.","In cases where your scripts are more elaborate, or when you wish to ensure your scripts behave as expected, you can use any bash testing framework to test your scripts.","One such lightweight framework, is Approvals.bash, which lets you test any command in your script, and prompting you for interactive approval of its output. Whenever the output changes, you will be prompted again to approve it.","A sample test script looks like this:"]}],[{"l":"Examples","p":["The examples folder in the GitHub repository contains many detailed and documented example configuration files, with their output.","All examples are listed below for convenience."]},{"l":"Basic use","p":["minimal- the most basic \"hello world\" example","commands- a script with sub-commands","commands-nested- a script with nested sub-commands"]},{"l":"Basic features","p":["command-default- configuring a default command","command-default-force- configuring a default command that runs instead of showing the usage text","command-aliases- allowing a command to be called with multiple names","command-examples- configuring command examples","dependencies- halting script execution unless certain dependencies are installed","dependencies-alt- halting script execution unless one of the required dependencies is installed","environment-variables- halting script execution unless certain environment variables are set","default-values- arguments and flags with default values","minus-v- using -v and -h in your script","multiline- help messages with multiple lines"]},{"l":"Advanced configuration features","p":["catch-all- a command that can receive an arbitrary number of arguments","catch-all-advanced- another example for the catch_all option","catch-all-stdin- combining catch_all with stdin to read multiple files","extensible- letting your script's users extend the script","extensible-delegate- extending your script by delegating commands to an external executable","whitelist- arguments and flags with a predefined allowed list of values","repeatable-arg- allowing arguments to be provided multiple times","repeatable-flag- allowing flags to be provided multiple times","reusable-flags- reuse flag definition for multiple commands","conflicts- defining mutually exclusive flags","command-private- hiding commands from the command list","stdin- reading input from stdin","filters- preventing commands from running unless custom conditions are met","commands-expose- showing sub-commands in the parent's help"]},{"l":"Customization","p":["colors-usage- adding colors to the usage text","command-groups- grouping sub-commands in logical sections","custom-strings- configuring the script's error and usage texts","custom-includes- adding and organizing your custom functions","custom-script-header- configuring a different script header","footer- adding a footer to the help message","command-filenames- overriding filenames for your source scripts","command-paths- configuring nested paths for your source scripts","command-function- configuring custom internal function names","split-config- splitting your bashly.yml into several smaller files"]},{"l":"Bashly library features","p":["config- using the config library for easy access to INI files","ini- using the ini library for direct, low level access to INI files","yaml- using the YAML reading functions","colors- using the color print feature","completions- adding bash completion functionality","validations- adding argument validation functions","hooks- adding before/after hooks"]},{"l":"Real-world-like examples","p":["docker-like- a sample script with deep commands (like docker container run)","git-like- a sample script with sub-commands similar to git"]},{"l":"Documentation generation","p":["render-mandoc- auto-generate man pages for your script"]},{"l":"Other examples","p":["heredoc- using heredoc strings","heredoc-alt- using heredoc strings in the lib directory","settings- using the settings.yml file to adjust bashly's behavior","help-command- adding a help command to your script"]},{"l":"Real world examples","p":["These tools were developed using bashly. You can review their code to learn more about using bashly.","Alf- a generator for bash aliases and sub-aliases","git-changelog- a change log generator","Respec- a convenience wrapper for ruby's rspec","Rush- a Personal Package Manager","slack-emoji-toolkit- liberate your custom Slack emojis","orcli- OpenRefine command line interface"]}],[{"l":"Command","p":["The command object serves two purposes, it:","Defines the root CLI application (command).","Defines any nested sub-commands, if any.","Unless otherwise specified, these definitions can be used for both the root command and sub-commands (under the commands definition).","Most properties are optional, unless specified otherwise."]},{"i":"show-me-how","l":":icon-code-review: Show Me How"},{"l":"Basic Options"},{"l":"name","p":["String","The name of the script or sub-command."]},{"l":"alias","p":["String / Array of Strings","This command used to be called short in bashly < 0.8.0","One or more additional optional names for this command. This can be used to create a shortcut for a command, or provide alternative names for it.","This option accepts either a string, or an array of strings.","You can add * as a suffix, to denote a starts with pattern - for example:"]},{"l":"help","p":["String","The header text to display when using --help.","This option can have multiple lines. In this case, the first line will be used as summary wherever appropriate."]},{"l":"args","p":["Array of Arguments","Specify the array of positional arguments this script needs.","Command"]},{"l":"flags","p":["Array of Flags","Specify the array of option flags this script needs.","Flags that are defined in a command that has sub-commands, are considered\"global flags\", and will be available to all sub-commands, in addition to any flag defined in any of the sub-commands themselves.","The docker-like example demonstrates this feature.","Command"]},{"l":"commands","p":["Array of Commands","Specify the array of commands. Each command will have its own args and flags.","Using commands on a given command implies that this command does not have flags or args."]},{"l":"version","p":["String","The string to display when using --version."]},{"l":"Common Options"},{"l":"default","p":["Boolean / String","Setting this to true on any command, will cause any unrecognized command line to be passed to this command.","Settings this to force will also execute this command (instead of showing the root usage text) when executed without any arguments."]},{"l":"environment_variables","p":["Array of Environment Variables","Specify an array of environment variables required or desired by your script.","Command"]},{"l":"examples","p":["String / Array of Strings","Specify an array of examples to show when using --help, or a multi-line string."]},{"l":"footer","p":["String","Add a custom message that will be displayed at the end of the --help text."]},{"l":"group","p":["String","In case you have many commands, use this option to specify a caption to display before this command.","This option is purely for display purposes."]},{"l":"Advanced Options"},{"l":"catch_all","p":["Boolean / String / Hash","Specify that this command should allow for additional arbitrary arguments or flags.","It can be set in one of three ways:","Set to true to just enable it.","Set to a string, to show this string in the usage help text.","Set to a hash containing label, help and required keys, to show a detailed help for it when running with --help. By default, catch_all arguments are optional, but you can specify required: true to require at least one argument.","To access arguments captured by catch_all in your script, use the$other_args array (or call the inspect_args command to see them)."]},{"l":"completions","p":["Array of Strings","Specify an array of additional completion suggestions when used in conjunction with bashly add completions.","Command"]},{"l":"dependencies","p":["Array of Strings / Hash / Array of Dependencies","Specify a list of required external dependencies (commands) required by your script.","Command"]},{"l":"expose","p":["Boolean / String","Setting this to true or always on any command that has sub-commands, will show its sub-commands in the help or usage text of the parent command.","Set to true to show the sub-commands only when the parent command is executed with --help.","Set to always to show the sub-commands also when the parent command is executed without any arguments.","You can use expose with the group option, to show sub-commands in a logical, visual grouping."]},{"l":"extensible","p":["Boolean / String","Specify that this command can be extended by external means.","Command"]},{"l":"filename","p":["String","The path (relative to src) to the partial source code file, in case you wish to store your source files in a different path than the default one.","To instruct bashly to store all command files in sub-directories, see Settings commands_dir"]},{"l":"filters","p":["Array of Strings","Add custom filter functions that will prevent the command from running unless certain conditions are met.","Command"]},{"l":"function","p":["String","The base name of the internal functions bashly will use when generating the script.","This is useful for scripts that contain several commands that otherwise evaluate to the same internal function name.","Note that the name specified here is just used as a base name. Bashly will generate several functions from it:","cli name_base function name_command","cli name_base function name_usage","and possibly more","Under most circumstances you should avoid using this directive. It is provided as a \"last resort\" mechanism to help in solving more complex scenarios."]},{"l":"private","p":["Boolean","Setting this to true on any command, will hide it from the command list."]}],[{"l":"Argument","p":["Specify positional arguments (required or optional) used by your script.","The argument's value will be available to you as ${args[name]} in your bash function.","Most properties are optional, unless specified otherwise."]},{"i":"show-me-how","l":":icon-code-review: Show Me How"},{"l":"Basic Options"},{"l":"name","p":["String","The name of the argument. Use lowercase letters, since it serves multiple purposes:","It will be capitalized in the help text.","It will be used as the hash key in the ${args[...]} associative bash array."]},{"l":"help","p":["String","The message to display when using --help. Can have multiple lines."]},{"l":"Common Options"},{"l":"default","p":["String / Array of Strings","The value to use in case it is not provided by the user. Implies that this argument is optional.","When using repeatable, you may provide an array here. It will be provided to your script as a space delimited string (similar to how it is provided when the user inputs values)."]},{"l":"required","p":["Boolean","Specify that this argument is required.","Once you define an optional argument (without required: true) then you cannot define required arguments after it."]},{"l":"Advanced Options"},{"l":"allowed","p":["Array of Strings","Limit the allowed values to a specified whitelist. Can be used in conjunction with default or required."]},{"l":"repeatable","p":["Boolean","Specify that this argument can be provided multiple times.","The received value will be formatted as a quoted, space-delimited string which you will need to convert to array with something like eval data=(${args[path]})."]},{"l":"unique","p":["Boolean","Specify that the values for this repeatable argument must be unique. Non-unique values will be ignored."]},{"l":"validate","p":["String","Apply a custom validation function.","Argument"]}],[{"l":"Flag","p":["Specify flags (required or optional) used by your script.","The flag's value will be available to you as ${args[--output]} in your bash function (regardless of whether the user provided it with the long or short form).","Bashly supports these additional flag formats as input:","-abc same as -a -b -c","-a=arg same as -a arg","--flag=arg same as --flag arg","Most properties are optional, unless specified otherwise."]},{"i":"show-me-how","l":":icon-code-review: Show Me How"},{"l":"Basic Options"},{"l":"long","p":["String","The long form of the flag, including the -- prefix."]},{"l":"short","p":["String","The short form of the flag, including the - prefix.","If you define short only (without defining long), then the value will be available to you in the $args associative array using the short name, for example: ${args[-f]}.","The -v and -h flags will be used as the short options for --version and --help respectively only if you are not using them in any of your own flags."]},{"l":"help","p":["String","The text to display when using --help. Can have multiple lines."]},{"l":"arg","p":["String","If the flag requires an argument, specify its name here."]},{"l":"Common Options"},{"l":"default","p":["String / Array of Strings","The value to use in case it is not provided by the user. Implies that this flag is optional, and only makes sense when the flag has an argument.","When using repeatable, you may provide an array here. It will be provided to your script as a space delimited string (similar to how it is provided when the user inputs values)."]},{"l":"required","p":["Boolean","Specify if this flag is required."]},{"l":"Advanced Options"},{"l":"allowed","p":["Array of Strings","Limit the allowed arguments to a given whitelist. Can be used in conjunction with default or required.","Remember to set the arg name when using this option."]},{"l":"conflicts","p":["Array of Strings","Specify that this flag is mutually exclusive with one or more other flags. The values of this array should be the long versions of the flags: conflicts: [--other, --another]","This option should be specified on both sides of the exclusivity."]},{"l":"completions","p":["Array of Strings","Specify an array of additional completion suggestions when used in conjunction with bashly add completions.","Remember to set the arg name when using this option.","Flag"]},{"l":"private","p":["Boolean","Setting this to true on any flag, will hide it from the help text."]},{"l":"repeatable","p":["Boolean","Specify that this flag can be provided multiple times.","When the flag does not have an argument, the user can provide it multiple times in the form of -v -v -v or -vvv. In this case, the received value will be the number of times it was entered.","When the flag has an argument, the user can provide it in the form of-d value1 -d value 2. In this case, the received value will be formatted as a quoted, space-delimited string which you will need to convert to array with something like eval data=(${args[--data]})."]},{"l":"unique","p":["Boolean","Specify that the values for this flag must be unique. Non-unique values will be ignored.","This option only applies to flags that have both repeatable: true and an arg specified."]},{"l":"validate","p":["String","Apply a custom validation function.","Flag"]}],[{"l":"Environment Variable","p":["Specify environment variables (required or optional) used by your script.","If an environment variable is defined as required (false by default), the execution of the script will be halted with a friendly error if it is not set.","In addition, you can specify a default value for the environment variable, which will be used in case the user has not defined it in their environment.","Most properties are optional, unless specified otherwise."]},{"i":"show-me-how","l":":icon-code-review: Show Me How"},{"l":"Basic Options"},{"l":"name","p":["String","The name of the variable. Use a lowercase name, it will be automatically capitalized wherever needed."]},{"l":"help","p":["String","The message to display when using --help. Can have multiple lines."]},{"l":"Common Options"},{"l":"default","p":["String","The value to use in case it is not provided by the user. Implies that this environment variable is optional."]},{"l":"private","p":["Boolean","Setting this to true on any environment variable, will hide it from the help text."]},{"l":"required","p":["Boolean","Specify if this variable is required."]},{"l":"Advanced Options"},{"l":"allowed","p":["Array of Strings","Limit the allowed values to a specified whitelist. Can be used in conjunction with default or required."]}],[{"l":"Dependency","p":["Specify a list of required external dependencies (commands). The script execution will be halted with a friendly error unless all dependency commands exist.","This configuration option can be provided in one of three ways:","A simple array, just listing the needed dependencies.","A hash specifying an additional help message to show in case the dependency is not installed (for example, to provide installation instructions).","A hash of hashes, providing a list of commands for a single dependency, and an optional help message. This is designed to provide an \"or\" functionality for a single dependency (for example: curl or wget).","When a command defines dependencies, it will also have the paths of the found dependencies in an associative array named deps. Call the inspect_args function from your command code to see this array."]},{"i":"show-me-how","l":":icon-code-review: Show Me How"},{"l":"Basic Options","p":["These options are valid when using the explicit hash syntax."]},{"l":"command","p":["Array of Strings","One or more commands that are required by your script. If more than one is provided, the dependency will be considered as satisfied if any of the commands exist.","For example, given this configuration:","the script will exit with the following error if both curl and wget are not available:"]},{"l":"help","p":["String","An additional optional help message to show when the dependency is not met. This can be useful for providing installation instructions or a download URL."]}],[{"l":"Custom Strings","p":["Bashly lets you control all the strings emitted by your generated bash script.","Most of these strings (for example, help messages) are configured as part of your bashly.yml configuration file.","However, if you also wish to customize other strings (for example, error messages), you will need to add a file named bashly-strings.yml to your src folder.","To do so, run:","This will add a configuration file with all the internal strings for you to configure.","For example:","Some strings contain special tokens, such as %s and %{name}. These will be replaced at runtime and you should keep them in your custom strings."]}],[{"l":"Library Functions","p":["Bashly comes with a set of library functions that can be added to your script by running the bashly add command. All libraries are documented inline, and the documentation below is a high level overview with examples.","Run bashly add --list to see all available libraries."]},{"l":"YAML parser","p":["Adds the ability to read YAML files in your bash script."]},{"i":"usage-example","l":":icon-code-review: Usage Example"},{"i":"config-ini-handler","l":"Config (INI) handler","p":["Adds the ability to create, read and write configuration INI files. This library uses the ini library under the hood for loading and saving the INI files."]},{"i":"usage-example","l":":icon-code-review: Usage Example"},{"l":"INI handler","p":["Adds the ability to load and save INI files. This is a low-level library that is used by the config library."]},{"i":"usage-example","l":":icon-code-review: Usage Example"},{"l":"Color output","p":["Adds functions for printing colored strings."]},{"i":"usage-example","l":":icon-code-review: Usage Example","p":["See the generated script in src/lib/colors.sh for the full list of colors."]},{"l":"Auto-update","p":["Files added by the bashly add * commands can be automatically updated to their original state by running","The --upgrade flag will scan all the files in the src/lib directory for a special magic comment in this format:","When found, and assuming the path of the file matches the one in the library, this file will be updated.","You are encouraged to modify the generated library functions to your liking, but if you do so, remember to remove this magic comment to prevent accidentally overriding it in future runs of bashly generate --upgrade."]},{"l":"See also","p":["Library Functions"]}],[{"l":"Custom Validations","p":["Bashly supports custom validation functions for your arguments, and flag arguments. This is how it works:","In your bashly configuration file, arguments and flags (with arguments) may have a validate: function_name option.","Whenever your run your script, it will look for a function with that name, prefixed by validate_ and will run it before allowing the user input to pass.","If the function returns any string, it is considered an error. The string will be displayed on screen, as the error message."]},{"l":"Built-in Custom Validations","p":["In addition, bashly comes with several built-in custom validations for common tasks:","file_exists- Ensures that the argument points to a file.","dir_exists- Ensures that the argument points to a directory.","integer- Ensures that the argument is an integer.","not_empty- Ensures that the argument is not empty.","In order to add these validations to your code, run:"]}],[{"l":"Custom Filters","p":["Bashly supports custom filter functions for your commands. These filters allow you to define custom conditions that can prevent your command from running unless they are met.","This is how it works:","In your bashly configuration file, commands may have a filters option, specifying an array of one or more function names.","Whenever your run your script, it will look for functions with that name, prefixed by filter_ and will run them before calling the command code.","If any of the functions returns any string, it is considered an error. The string will be displayed on screen, as the error message.","To verify a program is installed, use dependencies instead.","To verify an environment variable is defined, use environment_variables instead."]}],[{"l":"Function Hooks","p":["Bashly provides you with three general purpose hooks that let you inject your own code. To use a hook, simply create one of the files listed below in your src directory.","Run bashly add hooks to create the two hook files in your source directory.","Hook File","Description","src/initialize.sh","Execute code inside the initialize() function, which is called before anything else.","src/before.sh","Execute code before calling any command, but after processing the command line input.","src/after.sh","Execute code after calling any command."]},{"l":"Alternatives","p":["These hooks should be considered last resort, for any functionality that is not covered by more native means.","Below is a list of some related features that can be used instead of using these hooks:","To change bash runtime parameters (e.g. set -o pipefail), use the strict setting instead.","To verify a program is installed, use dependencies instead.","To verify an environment variable is defined, use environment_variables instead.","To perform validation operations, use Custom Validations instead.","To halt the execution of the command unless certain conditions are met, use Custom Filters instead."]}],[{"l":"Bash Completion","p":["Bashly comes with built-in bash completions generator, provided by the completely gem.","By running bashly add completions commands, you can add this functionality to your script in one of three ways:","The bash completions generation is completely automatic, but you will have to regenerate the completion function whenever you make changes to your bashly.yml file.","By running bashly generate --upgrade, your completions function(generated with bashly add completions) will be regenerated."]},{"i":"bashly-add-completions","l":"`bashly add completions`","p":["Creates a function in your ./src/lib directory that echoes a completion script. You can then call this function from any command (for example yourcli completions) and your users will be able to install the completions by running eval $(yourcli completions)."]},{"i":"bashly-add-completions-script","l":"`bashly add completions_script`","p":["Creates a standalone completions script that can be sourced or copied to the system's bash completions directory."]},{"i":"bashly-add-completions-yaml","l":"`bashly add completions_yaml`","p":["Creates the raw data YAML file. This is intended mainly for development purposes."]},{"l":"Custom command completions","p":["In addition to the automatic suggestion of sub-commands and flags, you can instruct bashly to also suggest files, directories, users, git branches and more. To do this, add another option in your bashly.yml on the command you wish to alter:"]},{"l":"Custom flag completions","p":["The completions option is also available on flags that have an arg. Similarly to the allowed option for arguments, the allowed list is added to the suggestions automatically (without the need to use completions).","Anything between ... will be added using the compgen -A action flag.","Anything else, will be appended to the compgen -W flag.","In case you are using the Argument allowed option or the Flag argument allowed option, these will be automatically added to the completions list as well."]},{"l":"Completions in ZSH","p":["If you are using Oh-My-Zsh, bash completions should already be enabled, otherwise, you should enable completion by adding this to your ~/.zshrc(if is it not already there):","After adding this (and restarting your session), you should be able to source any bash completion script in zsh."]},{"l":"Additional documentation","p":["For more information about these custom completions, see the documentation for the completely gem."]},{"l":"Example"}],[{"l":"Split Config","p":["In case your bashly.yml file becomes too large, you may import smaller configuration snippets by using the import keyword.","Loaded configuration snippets can be placed in:","Other YAML files, anywhere you want (typically, inside your src folder).","As a YAML front matter, alongside the shell code that they represent."]},{"l":"Importing other YAML files","p":["Consider the below, standard bashly.yml config:","Extracting the download command to a separate YAML file, looks like this:"]},{"l":"Embedding the YAML definition alongside its bash code","p":["The import directive can also be used to load YAML front matter from any text file. This feature can be useful in case you wish to embed the definition of the command alongside its source code (shell script)."]},{"l":"Debugging complex configuration","p":["Running bashly validate --verbose shows the configuration file as Bashly sees it, even if it is invalid. This can be helpful when trying to debug validation errors for complex configuration files."]}],[{"l":"ERB in Config","p":["The bashly.yml configuration is pre-processed by ERB before it is loaded by the bashly command line. This means that you can use Ruby code to load values from external sources into your bashly configuration.","Use %= ... % to execute Ruby code and output the result.","Use % ... % to execute Ruby code without outputting the result."]}],[{"l":"Extensible Scripts","p":["You may configure your generated bash script to delegate any unknown command to an external executable, by setting the extensible option to either true, or to a different external command.","This is similar to how git works. When you execute git whatever, the git command will look for a file named git-whatever in the path, and execute it.","The extensible option cannot be specified together with the default option, since both specify a handler for unknown commands.","The extensible option supports two operation modes:"]},{"l":"Extension mode","p":["extensible: true","By setting extensible to true, a specially named executable will be called when an unknown command is called by the user.","Given this configuration:","And this user command:","The generated script will look for an executable named myscript-something in the path. If found, it will be called."]},{"l":"Delegate mode","p":["extensible: executable name","By setting extensible to any string, unknown command calls by the user will be delegated to the executable with that name.","Given this configuration:","And this user command:","The generated script will execute git status."]}],[{"l":"Rendering Documentation"},{"l":"Overview","p":["Bashly is capable of rendering documentation for your script based on your bashly.yml configuration by using the bashly render command.","This command can generate any kind of output using either templates that are built in in Bashly (for example Markdown or man pages), or by using any custom templates."]},{"l":"Built-in templates","p":["Bashly comes with several documentation templates. In order to see a list of all templates, run:","Some built in templates may have special optional features that let you customize the output. Learn more about each template by running:"]},{"l":"Example"},{"l":"Custom templates"},{"l":"Create your own","p":["To create custom templates, it is recommended to use one of the built-in templates as a starting point. To copy the template source code to your project run:","Creating custom templates requires some minimal understanding of Ruby."]},{"l":"Template structure","p":["A string containing the path to the target directory, as provided by the user at run time ( bashly render SOURCE TARGET).","A string containing the path to the template source directory.","A string that will contain the value of --show PATH if provided by the user at runtime.","command","Description","Have a README.md file Will be shown when running with --about.","Have a render.rb file Will be executed when running bashly render.","Method","Print a message with colors (see Colsole)","save","say","show","source","target","Template directories are expected to:","The method your script should call in order to save an output file.","The render.rb file will be executed when running bashly render and will have access to these variables and methods:","The render.rb script is executed with the Bashly::RenderContext context.","The root command of your bashly script ( Bashly::Script::Command).","Variable"]},{"l":"Render script example","p":["This approach allows you to use any template engine that is available in Ruby.","For example, this render.rb file uses GTX to render the markdown documentation:"]},{"l":"Custom properties","p":["The bashly.yml allows the use of arbitrary properties. Any property that starts with x_ is ignored by the validation process, and is therefore allowed.","You can use this functionality to add properties that can be used in your rendering templates. See one of the built-in templates for usage example."]}],[{"l":"Custom Libraries Source"},{"l":"Overview","p":["Bashly is capable of importing external library functions from a custom central libraries source using the bashly add --source NAME ... command.","These external library sources can be:","A local path","A remote git repository","A remote GitHub repository (public or private)","This can be useful if:","You have multiple bashly-generated scripts, and wish to have a central place for shareable libraries.","You wish to create a public source for libraries for bashly.","You wish to create a private shareable libraries source for your organization."]},{"l":"Specifications","p":["The external library source must have a libraries.yml file describing the libraries it provides. A typical libraries.yml file looks like this:"]},{"l":"help","p":["The message to show when running bashly add --source NAME --list"]},{"l":"files","p":["An array of source+ target paths of files to copy when adding this library.","source is relative to the root of the library source.","target is relative to the current directory, and you can use any of these tokens in the path:","%{user_source_dir}- path to the user's source directory (normally ./src).","%{user_target_dir}- path to the user's target directory (normally .).","%{user_lib_dir}- path to the user's lib directory (normally ./src/lib).","%{user_ext}- the user's selected partials extension (normally sh)."]},{"l":"post_install_message","p":["An optional message to show after the user installs the library. You can use a multi-line YAML string here, and use color markers as specified by the Colsole gem.","In the below example, g`...` means green, m`...` magenta, and bu`...` blue underlined:"]},{"l":"Auto-upgrade","p":["Your library files can be set to auto-upgrade when running bashly generate --upgrade. In order to enable this functionality, you need to add a special upgrade marker to your file:","For example","You can also use the shorthand version of the marker, which will be replaced with the full marker when the library is added:","The double-hash comment marker is optional, and denotes a hidden comment, which will not appear in the final generated bash script."]}],[{"l":"Installing Ruby","p":["The installation instructions provided below aim to be the fastest and simplest way to install Ruby, with the ability to install gems that build native extensions.","The general instructions are:","Install build tools / development tools Each operating system's package manager has its own \"meta package\" that installs some compilers and other packages needed for building other packages.","Install libyaml Many Ruby gems rely on this library.","Ensure the gem bin path is in your $PATH Some installation methods do not update the $PATH properly. You will need to alter your $PATH so that it includes the path to the location of gem executable files."]},{"i":"brew---macos","l":"brew - macOS"},{"i":"apt---ubuntu--debian","l":"apt - Ubuntu / Debian"},{"i":"pacman---arch-linux","l":"pacman - Arch Linux"},{"i":"dnf---fedora--centos--red-hat","l":"dnf - Fedora / CentOS / Red Hat"}]]